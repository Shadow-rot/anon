import os
import logging
import traceback
import asyncio

from AnonXMusic import app
from AnonXMusic.utils.database import is_on
from pyrogram.errors import FloodWait

LOGGER_ID = int(os.getenv("LOGGER_ID", 0))
LOG_FILE_PATH = "log.txt"


logger = logging.getLogger("AnonXMusicErrors")


async def send_error_to_owner(error: Exception):
    # Check if logging is enabled
    if not await is_on(2):
        return

    # Extract only ERROR/CRITICAL lines from log.txt
    try:
        with open(LOG_FILE_PATH, "r") as f:
            error_lines = [line for line in f if "ERROR" in line or "CRITICAL" in line]
    except FileNotFoundError:
        error_lines = ["log.txt not found."]

    error_preview = "".join(error_lines[-10:])  # last 10 error lines

    tb = "".join(traceback.format_exception(type(error), error, error.__traceback__))
    text = (
        f"**[AUTO ERROR REPORT]**\n\n"
        f"**Exception:** `{str(error)}`\n"
        f"**Traceback:**\n```{tb}```\n\n"
        f"**Log Snippet:**\n```{error_preview.strip() or 'No ERROR logs found.'}```"
    )

    logger.error(tb)

    try:
        await app.send_message(LOGGER_ID, text)
    except FloodWait as e:
        await asyncio.sleep(e.value)
        await app.send_message(LOGGER_ID, text)
    except Exception as ex:
        logger.warning(f"Could not send error to LOGGER_ID: {ex}")